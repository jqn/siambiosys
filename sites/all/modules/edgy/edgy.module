<?php

/**
 * @file
 * Main module file edgy_paragraphs.module
 */

// Style name.
define('EDGY_STYLE', 'edgy');
// Container variable name.
define('EDGY_CONTAINER_VARIABLE', 'edgy_container_class');
// Default container name.
define('EDGY_CONTAINER_NAME', 'container');

/**
 * Implements hook_menu().
 */
function edgy_menu() {
  $items = array();
  $includes = drupal_get_path('module', 'edgy') . '/includes';

  $items['admin/config/system/edgy'] = array(
    'title' => 'Edgy settings',
    'description' => 'Manage container class name.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgy_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'edgy.admin.inc',
    'file path' => $includes,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function edgy_theme() {
  return array(
    'edgy_paragraphs_item' => array(
      'render element' => 'elements',
      'template' => 'edgy-paragraphs-item',
      'path' => drupal_get_path('module', 'edgy') . '/theme',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function edgy_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_ds_layout_info().
 */
function edgy_ds_layout_info() {
  $path = drupal_get_path('module', 'edgy');

  $layouts = array(
    'edgy_1col_wrapper' => array(
      'label' => t('Edgy one column'),
      'path' => $path . '/ds_layouts/edgy_1col_wrapper',
      'regions' => array(
        'ds_content' => t('Content'),
      ),
      'image' => TRUE,
    ),
  );

  return $layouts;
}

/**
 * Returns container class name.
 *
 * @return null
 */
function edgy_get_container_class() {
  return variable_get(EDGY_CONTAINER_VARIABLE, EDGY_CONTAINER_NAME);
}

/**
 * Implements hook_panels_pre_render().
 */
function edgy_panels_pre_render($panels_display, $renderer) {

  $panel_settings = $panels_display->panel_settings;
  $context = $panels_display->context;

  if (!empty($panel_settings['style'])) {
    // Check if panelizer style is edgy.
    if ($panel_settings['style'] == EDGY_STYLE) {
      if (!empty($context['panelizer'])) {
        $entity = $context['panelizer']->data;
        // Add edgy property.
        $entity->edgy = TRUE;
      }
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 */
function edgy_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {
  // Only apply container class on paragraphs_item entities using the 'full' view mode.
  if ($context['entity_type'] == 'paragraphs_item' && $context['view_mode'] == 'full') {
    $entity = $vars['paragraphs_item'];
    // If page is edge-to-edge, then apply container.
    if (edgy_is_paragraph_edgy($entity) == TRUE) {
      $vars['ds_content_classes'] = edgy_get_container_class();
    }
  }
}

/**
 * Implements template_preprocess_edgy_paragraphs_item().
 */
function template_preprocess_edgy_paragraphs_item(&$variables) {
  // Include entity.theme.inc
  module_load_include('inc', 'entity', 'theme/entity.theme');
  // Run through entity preprocessor.
  template_preprocess_entity($variables);
  // Clean up the theme_hook_suggestions.
  edgy_theme_hook_suggestions($variables);
  $entity = $variables['elements']['#entity'];

  // Define classes.
  $variables['content_classes_array'][] = 'content';
  if (edgy_is_paragraph_edgy($entity) == TRUE) {
    $variables['content_classes_array'][] = edgy_get_container_class();
  }
}

/**
 * Implements template_process_edgy_paragraphs_item().
 */
function template_process_edgy_paragraphs_item(&$variables) {
  $variables['content_classes'] = implode(' ', $variables['content_classes_array']);
}

/**
 * Helper function which cleans up the 'theme_hook_suggestions'
 * array.
 *
 * @param $variables
 */
function edgy_theme_hook_suggestions(&$variables) {
  // Update theme_hook_suggestions arrays.
  // Reset current array.
  $variables['theme_hook_suggestions'] = array();
  // Get entity details.
  $entity_type = $variables['elements']['#entity_type'];
  $entity = $variables['elements']['#entity'];
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  // Add suggestions.
  $variables['theme_hook_suggestions'][] = 'edgy_' . $entity_type;
  $variables['theme_hook_suggestions'][] = 'edgy_' . $entity_type . '__' . $bundle;
  $variables['theme_hook_suggestions'][] = 'edgy_' . $entity_type . '__' . $bundle . '__' . $variables['view_mode'];
  if ($id = entity_id($entity_type, $entity)) {
    $variables['theme_hook_suggestions'][] = 'edgy_' . $entity_type . '__' . $id;
  }
}

/**
 * Check the host entity to see if it's edgy.
 *
 * @param \ParagraphsItemEntity $item
 * @return bool
 */
function edgy_is_paragraph_edgy(ParagraphsItemEntity $item) {
  $entity = $item->hostEntity();
  return !empty($entity->edgy) ? TRUE : FALSE;
}

/**
 * Implements hook_entity_view_alter().
 */
function edgy_entity_view_alter(&$build, $type) {
  if ($type == 'paragraphs_item' && $build['#view_mode'] == 'full') {
    // If the entity is not controlled by DS, then change the #theme. We need to
    // check if the entity is controlled by DS, because changing the #theme will
    // break DS configuration.
    if (edgy_is_entity_ds($build['#entity_type'], $build['#bundle'], $build['#view_mode']) == FALSE) {
      // Point paragraphs_item theme to edgy.
      $build['#theme'] = 'edgy_paragraphs_item';
    }
  }
}

/**
 * Helper functions tells us if the entity layout is handled by Display Suite.
 *
 * @param $entity_type
 * @param $bundle
 * @param $view_node
 * @return bool
 */
function edgy_is_entity_ds($entity_type, $bundle, $view_node) {
  // Check if DS is enabled.
  if (module_exists('ds')) {
    $layout = ds_get_layout($entity_type, $bundle, $view_node);
    return !empty($layout) ? TRUE : FALSE;
  }
  return FALSE;
}
